"use client";

import { useState, useEffect } from "react";
import { Link, useNavigate } from "react-router-dom";
import "./HotelRooms.scss";
import { fetchAllHotels, fetchHotelById } from "../../server/hotelAPI";

const HotelRooms = () => {
  const [filters, setFilters] = useState({
    popularFilters: [],
    accommodationTypes: [],
    starRatings: [],
    paymentOptions: [],
    propertyAmenities: [],
    guestRatings: [],
    distanceToCenter: [],
    roomAmenities: [],
    bedTypes: [],
    priceRange: [],
    sortBy: "bestLowToHigh",
  });

  const [hotels, setHotels] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const navigate = useNavigate();
  const [cardLoading, setCardLoading] = useState(null); // id of hotel being loaded

  useEffect(() => {
    fetchAllHotels()
      .then((data) => {
        if (data.length === 0) {
          setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch kh√°ch s·∫°n. Hi·ªÉn th·ªã d·ªØ li·ªáu m·∫´u.");
        } else {
          setHotels(
            data.map((hotel, idx) => ({
              id: hotel._id || idx,
              name: hotel.name,
              location: hotel.address,
              price: hotel.rooms && hotel.rooms[0] ? hotel.rooms[0].price : 0,
              rating: hotel.rating || 0,
              reviews: hotel.reviewCount
                ? `${hotel.reviewCount} ƒë√°nh gi√°`
                : "Ch∆∞a c√≥ ƒë√°nh gi√°",
              image:
                hotel.images && hotel.images[0]
                  ? hotel.images[0]
                  : "/placeholder.svg",
              amenities: hotel.amenities || [],
            }))
          );
        }
        setLoading(false);
      })
      .catch(() => {
        setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch kh√°ch s·∫°n. Hi·ªÉn th·ªã d·ªØ li·ªáu m·∫´u.");

        setLoading(false);
      });
    // eslint-disable-next-line
  }, []);

  const handleFilterChange = (filterType, value) => {
    setFilters((prev) => ({
      ...prev,
      [filterType]: prev[filterType].includes(value)
        ? prev[filterType].filter((item) => item !== value)
        : [...prev[filterType], value],
    }));
  };

  const handleSortChange = (value) => {
    setFilters((prev) => ({
      ...prev,
      sortBy: value,
    }));
  };

  // Khi click v√†o card kh√°ch s·∫°n
  const handleHotelClick = async (hotelId) => {
    setCardLoading(hotelId);
    const detail = await fetchHotelById(hotelId);
    setCardLoading(null);
    if (detail) {
      navigate(`/hotel/${hotelId}`, { state: { hotel: detail } });
    } else {
      alert("Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt kh√°ch s·∫°n. Vui l√≤ng th·ª≠ l·∫°i.");
    }
  };

  return (
    <div className="hotel-rooms">
      <div className="container">
        <div className="page-header">
          <h1>Danh s√°ch kh√°ch s·∫°n</h1>
          <p>
            Kh√°m ph√° v√† l·ª±a ch·ªçn kh√°ch s·∫°n ph√π h·ª£p cho chuy·∫øn ƒëi c·ªßa b·∫°n. ∆Øu ƒë√£i
            h·∫•p d·∫´n, ph√≤ng ƒë·∫πp, gi√° t·ªët, ƒë·∫∑t ph√≤ng nhanh ch√≥ng!
          </p>
        </div>

        <div className="content-layout">
          <div className="hotels-list">
            {loading ? (
              <div>ƒêang t·∫£i kh√°ch s·∫°n...</div>
            ) : (
              hotels.map((hotel) => (
                <div
                  key={hotel.id}
                  className={`hotel-card${
                    cardLoading === hotel.id ? " loading" : ""
                  }`}
                  onClick={() => handleHotelClick(hotel.id)}
                  style={{ cursor: "pointer" }}
                >
                  <div className="hotel-image">
                    <img
                      src={hotel.image || "/placeholder.svg"}
                      alt={hotel.name}
                    />
                  </div>
                  <div className="hotel-details">
                    <div className="hotel-header">
                      <h3 className="hotel-name">{hotel.name}</h3>
                      <div className="hotel-rating">
                        <div className="stars">
                          {[...Array(Math.round(hotel.rating))].map((_, i) => (
                            <span key={i}>‚≠ê</span>
                          ))}
                        </div>
                        <span className="reviews">{hotel.reviews}</span>
                      </div>
                    </div>
                    <p className="hotel-location">üìç {hotel.location}</p>
                    <div className="hotel-amenities">
                      {hotel.amenities.map((amenity, index) => (
                        <span key={index} className="amenity">
                          {amenity === "Free wifi" && "üì∂"}
                          {amenity === "Free breakfast" && "üç≥"}
                          {amenity === "Guest service" && "üë§"}
                          {amenity}
                        </span>
                      ))}
                    </div>
                    <div className="hotel-footer">
                      <div className="price">
                        <span className="amount">
                          {hotel.price
                            ? hotel.price.toLocaleString("vi-VN") + " VND"
                            : "Li√™n h·ªá"}
                        </span>
                        <span className="period">/ng√†y</span>
                      </div>
                      {/* X√≥a Link, click c·∫£ card */}
                    </div>
                  </div>
                  {cardLoading === hotel.id && (
                    <div className="card-loading-overlay">ƒêang t·∫£i...</div>
                  )}
                </div>
              ))
            )}
            {error && <div className="error-msg">{error}</div>}
            <div className="show-more">
              <button className="btn btn-primary">Xem th√™m</button>
            </div>
          </div>

          <div className="filters-sidebar">
            <div className="filters-header">
              <h3>B·ªò L·ªåC</h3>
              <button
                className="clear-btn"
                onClick={() =>
                  setFilters({
                    popularFilters: [],
                    accommodationTypes: [],
                    starRatings: [],
                    paymentOptions: [],
                    propertyAmenities: [],
                    guestRatings: [],
                    distanceToCenter: [],
                    roomAmenities: [],
                    bedTypes: [],
                    priceRange: [],
                    sortBy: "bestLowToHigh",
                  })
                }
              >
                X√ìA T·∫§T C·∫¢
              </button>
            </div>

            {/* Kho·∫£ng gi√° */}
            <div className="filter-section">
              <h4>Kho·∫£ng gi√°</h4>
              <div className="filter-options">
                {[
                  "250.000ƒë - 500.000ƒë",
                  "500.000ƒë - 1.000.000ƒë",
                  "1.000.000ƒë - 1.500.000ƒë",
                ].map((range) => (
                  <label key={range} className="filter-option">
                    <input
                      type="checkbox"
                      checked={filters.priceRange.includes(range)}
                      onChange={() => handleFilterChange("priceRange", range)}
                    />
                    <span className="checkmark"></span>
                    {range}
                  </label>
                ))}
              </div>
            </div>

            {/* S·∫Øp x·∫øp theo */}
            <div className="filter-section">
              <h4>S·∫Øp x·∫øp theo</h4>
              <div className="filter-options">
                {[
                  { value: "bestLowToHigh", label: "∆Øu ti√™n gi√° th·∫•p" },
                  { value: "priceHighToLow", label: "Gi√° cao ƒë·∫øn th·∫•p" },
                  { value: "newestFirst", label: "M·ªõi nh·∫•t" },
                ].map((option) => (
                  <label key={option.value} className="filter-option">
                    <input
                      type="radio"
                      name="sortBy"
                      checked={filters.sortBy === option.value}
                      onChange={() => handleSortChange(option.value)}
                    />
                    <span className="radiomark"></span>
                    {option.label}
                  </label>
                ))}
              </div>
            </div>

            {/* B·ªô l·ªçc ph·ªï bi·∫øn */}
            <div className="filter-section">
              <h4>B·ªô l·ªçc ph·ªï bi·∫øn</h4>
              <div className="filter-options">
                {[
                  "V·ªã tr√≠: 8+ Xu·∫•t s·∫Øc",
                  "T·ªß l·∫°nh",
                  "ƒêi·ªÅu h√≤a",
                  "TV",
                  "H·ªßy mi·ªÖn ph√≠",
                  "ƒê·∫∑t kh√¥ng c·∫ßn th·∫ª t√≠n d·ª•ng",
                  "Tr·∫£ ti·ªÅn li·ªÅn",
                  "X·∫øp h·∫°ng c·ªßa kh√°ch: 8+ Xu·∫•t s·∫Øc",
                ].map((filter) => (
                  <label key={filter} className="filter-option">
                    <input
                      type="checkbox"
                      checked={filters.popularFilters.includes(filter)}
                      onChange={() =>
                        handleFilterChange("popularFilters", filter)
                      }
                    />
                    <span className="checkmark"></span>
                    {filter}
                  </label>
                ))}
              </div>
            </div>

            {/* Lo·∫°i h√¨nh n∆°i ·ªü */}
            <div className="filter-section">
              <h4>Lo·∫°i h√¨nh n∆°i ·ªü</h4>
              <div className="filter-options">
                {[
                  "Kh√°ch s·∫°n",
                  "Resort",
                  "Nh√† ngh·ªâ",
                  "CƒÉn h·ªô",
                  "Bi·ªát th·ª± ngh·ªâ d∆∞·ª°ng",
                ].map((type) => (
                  <label key={type} className="filter-option">
                    <input
                      type="checkbox"
                      checked={filters.accommodationTypes.includes(type)}
                      onChange={() =>
                        handleFilterChange("accommodationTypes", type)
                      }
                    />
                    <span className="checkmark"></span>
                    {type}
                  </label>
                ))}
              </div>
            </div>

            {/* X·∫øp h·∫°ng sao */}
            <div className="filter-section">
              <h4>X·∫øp h·∫°ng sao</h4>
              <div className="filter-options">
                {[
                  "5-ƒê√°nh gi√° sao",
                  "4-ƒê√°nh gi√° sao",
                  "3-ƒê√°nh gi√° sao",
                  "2-ƒê√°nh gi√° sao",
                  "1-ƒê√°nh gi√° sao",
                ].map((star) => (
                  <label key={star} className="filter-option">
                    <input
                      type="checkbox"
                      checked={filters.starRatings.includes(star)}
                      onChange={() => handleFilterChange("starRatings", star)}
                    />
                    <span className="checkmark"></span>
                    {star}
                  </label>
                ))}
              </div>
            </div>

            {/* L·ª±a ch·ªçn thanh to√°n */}
            <div className="filter-section">
              <h4>L·ª±a ch·ªçn thanh to√°n</h4>
              <div className="filter-options">
                {[
                  "H·ªßy mi·ªÖn ph√≠",
                  "Thanh to√°n t·∫°i n∆°i ·ªü",
                  "ƒê·∫∑t tr∆∞·ªõc, tr·∫£ ti·ªÅn sau",
                  "Tr·∫£ ti·ªÅn li·ªÅn",
                  "ƒê·∫∑t kh√¥ng c·∫ßn th·∫ª t√≠n d·ª•ng",
                ].map((option) => (
                  <label key={option} className="filter-option">
                    <input
                      type="checkbox"
                      checked={filters.paymentOptions.includes(option)}
                      onChange={() =>
                        handleFilterChange("paymentOptions", option)
                      }
                    />
                    <span className="checkmark"></span>
                    {option}
                  </label>
                ))}
              </div>
            </div>

            {/* Ti·ªán nghi ch·ªó ngh·ªâ */}
            <div className="filter-section">
              <h4>Ti·ªán nghi ch·ªó ngh·ªâ</h4>
              <div className="filter-options">
                {[
                  "B·ªÉ b∆°i",
                  "Internet",
                  "B√£i ƒë·ªÉ xe",
                  "ƒê∆∞a ƒë√≥n s√¢n bay",
                  "Ph√≤ng t·∫≠p",
                  "B√†n ti·∫øp t√¢n [24 gi·ªù]",
                  "Th√≠ch h·ª£p cho gia ƒë√¨nh/tr·∫ª em",
                  "Kh√¥ng h√∫t thu·ªëc",
                  "Spa/x√¥ng kh√¥",
                  "Nh√† h√†ng",
                  "Khu v·ª±c h√∫t thu·ªëc",
                  "ƒê∆∞·ª£c ph√©p ƒë∆∞a th√∫ nu√¥i v√†o",
                ].map((amenity) => (
                  <label key={amenity} className="filter-option">
                    <input
                      type="checkbox"
                      checked={filters.propertyAmenities.includes(amenity)}
                      onChange={() =>
                        handleFilterChange("propertyAmenities", amenity)
                      }
                    />
                    <span className="checkmark"></span>
                    {amenity}
                  </label>
                ))}
              </div>
            </div>

            {/* ƒê√°nh gi√° c·ªßa kh√°ch */}
            <div className="filter-section">
              <h4>ƒê√°nh gi√° c·ªßa kh√°ch</h4>
              <div className="filter-options">
                {[
                  "9+ Tr√™n c·∫£ tuy·ªát v·ªùi",
                  "8+ Xu·∫•t s·∫Øc",
                  "7+ R·∫•t t·ªët",
                  "6+ H√†i l√≤ng (151)",
                ].map((rate) => (
                  <label key={rate} className="filter-option">
                    <input
                      type="checkbox"
                      checked={filters.guestRatings.includes(rate)}
                      onChange={() => handleFilterChange("guestRatings", rate)}
                    />
                    <span className="checkmark"></span>
                    {rate}
                  </label>
                ))}
              </div>
            </div>

            {/* Kho·∫£ng c√°ch ƒë·∫øn trung t√¢m */}
            <div className="filter-section">
              <h4>Kho·∫£ng c√°ch ƒë·∫øn trung t√¢m</h4>
              <div className="filter-options">
                {[
                  "B√™n trong trung t√¢m th√†nh ph·ªë",
                  "c√°ch trung t√¢m <2 km",
                  "c√°ch trung t√¢m 2-5 km",
                  "c√°ch trung t√¢m 5-10 km",
                  "c√°ch trung t√¢m >10 km",
                ].map((distance) => (
                  <label key={distance} className="filter-option">
                    <input
                      type="checkbox"
                      checked={filters.distanceToCenter.includes(distance)}
                      onChange={() =>
                        handleFilterChange("distanceToCenter", distance)
                      }
                    />
                    <span className="checkmark"></span>
                    {distance}
                  </label>
                ))}
              </div>
            </div>

            {/* Ti·ªán nghi ph√≤ng */}
            <div className="filter-section">
              <h4>Ti·ªán nghi ph√≤ng</h4>
              <div className="filter-options">
                {[
                  "ƒêi·ªÅu h√≤a",
                  "TV",
                  "T·ªß l·∫°nh",
                  "Truy c·∫≠p Internet",
                  "Ban c√¥ng/s√¢n hi√™n",
                  "Ti·ªán nghi l√†/·ªßi",
                  "B·ªìn t·∫Øm",
                  "M√°y gi·∫∑t",
                  "M√°y pha tr√†/c√† ph√™",
                  "B·∫øp",
                  "B·ªÉ b∆°i ri√™ng",
                  "S∆∞·ªüi",
                  "ƒê∆∞·ª£c ph√©p ƒë∆∞a th√∫ c∆∞ng v√†o ph√≤ng",
                ].map((roomAmenity) => (
                  <label key={roomAmenity} className="filter-option">
                    <input
                      type="checkbox"
                      checked={filters.roomAmenities.includes(roomAmenity)}
                      onChange={() =>
                        handleFilterChange("roomAmenities", roomAmenity)
                      }
                    />
                    <span className="checkmark"></span>
                    {roomAmenity}
                  </label>
                ))}
              </div>
            </div>

            {/* Lo·∫°i gi∆∞·ªùng */}
            <div className="filter-section">
              <h4>Lo·∫°i gi∆∞·ªùng</h4>
              <div className="filter-options">
                {[
                  "ƒê√¥i",
                  "Gi∆∞·ªùng ƒë√¥i l·ªõn",
                  "ƒê∆°n/hai gi∆∞·ªùng ƒë∆°n",
                  "Gi∆∞·ªùng l·ªõn",
                  "Gi∆∞·ªùng t·∫ßng",
                ].map((bed) => (
                  <label key={bed} className="filter-option">
                    <input
                      type="checkbox"
                      checked={filters.bedTypes.includes(bed)}
                      onChange={() => handleFilterChange("bedTypes", bed)}
                    />
                    <span className="checkmark"></span>
                    {bed}
                  </label>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default HotelRooms;
